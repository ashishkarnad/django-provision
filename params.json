{"name":"Provisioning a VPS to Run Django with Ansible ","tagline":"breaking eggs with ansible","body":"About\r\n=====\r\n\r\nThis repo is an [in-house project](http://dgnest.com) made with â™¥ that tries to make our live easier. You don't know how much time we wasted doing this stuff by hand few years ago. So, be patient, we are still working on it.\r\n\r\nFeatures:\r\n\r\n+ Deployment server: **Ubuntu 12.04 LTS**\r\n\r\n\r\nGetting started\r\n===============\r\n\r\nIn order to provision. First we have to [generate our ssh keys.](https://help.github.com/articles/generating-ssh-keys)\r\nThen copy your SSH public key and put into your remote repository for SSH deployment. \r\nI forgot, we will use [SSH agent forwarding](https://developer.github.com/guides/managing-deploy-keys/#ssh-agent-forwarding) strategy to deploy our keys.\r\n\r\n```bash\r\n$ cat ~/.ssh/id_rsa.pub\r\n```\r\n\r\nThis procedure is executed just once.\r\n\r\n\r\n\r\nPrepare the Nest\r\n================\r\n\r\nSet your local environment with the variables below. I strongly recommend \r\nto use [virtualenvwrapper](http://virtualenvwrapper.readthedocs.org/en/latest/) \r\nfor this purpose. I am using it and all my virtualenv variables are set into \r\nthe *postactivate* script.\r\n\r\n```bash\r\n# Linux User.\r\nexport USER=mynewuser\r\n...\r\n```\r\nCheck [this](http://docs.ansible.com/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module) out in order to generate user passwords.\r\n\r\n```bash\r\n...\r\nexport PASSWORD='$6$rounds=100000$.8vhLbNWv7YaHkVb$ALN9H7/4qzVPO83eT1tiT5o4EI9EpBuOo6B53JYcDEXU5Tn2ZMbdlxOCkCaHDnDeJenURpZaX5L3GGlW03s/d1'\r\nexport ROOT_PASSWORD='$6$rounds=100000$.8vhLbNWv7YaHkVb$ALN9H7/4qzVPO83eT1tiT5o4EI9EpBuOo6B53JYcDEXU5Tn2ZMbdlxOCkCaHDnDeJenURpZaX5L3GGlW03s/d1'\r\n\r\n# Api keys local filepath.\r\nexport API_KEY_LOCALPATH='~/.virtualenvs/dgnest/bin/postactivate'\r\n# RSA keys for SSH authentication.\r\nexport RSA_PUB_KEY_LOCALPATH='~/.ssh/id_rsa.pub'\r\nexport RSA_PRIV_KEY_LOCALPATH='~/.ssh/id_rsa'\r\n\r\n# Postgres rol.\r\nexport POSTGRES_ROLE=mynewrol\r\n...\r\n```\r\n\r\nCheck [this](http://docs.ansible.com/postgresql_user_module.html) out to generate encrypted passwords.\r\n\r\n```bash\r\n...\r\nexport POSTGRES_ROLE_PASSWORD=mypassword\r\n# Postgres database.\r\nexport DB_NAME=mydb\r\nexport DB_HOST=localhost\r\nexport DB_PORT=5432\r\n\r\n# Git Repo.\r\nexport REPOSITORY=\"git@remote-host.com:username/myrepo.git\"\r\nexport REPOSITORY_NAME=\"myrepo\"\r\nexport DEPLOYMENT_BRANCH=\"master\"\r\nexport REMOTE_HOST=\"remote-host.com\"\r\n```\r\n\r\nAll these enviroment variables are mapped into the file \r\n*provisioning/group_vars/all*. So you are free to modify it. \r\n\r\n\r\nProvisioning with Ansible into a Virtual Machine (VM) using vagrant:\r\n====================================================================\r\n\r\n```bash\r\n# Bringing VM 'default' up with 'virtualbox' provider.\r\n$ vagrant up\r\n# Provision our VM with ansible.\r\n$ vagrant provision\r\n```\r\n\r\nMore info:\r\n\r\n+ [Ansible DOC](http://docs.ansible.com/guide_vagrant.html)\r\n+ [Vagran DOC](http://docs.vagrantup.com/v2/provisioning/ansible.html)\r\n\r\nProvisioning with Ansible into a VPS:\r\n=====================================\r\n\r\nBefore this step, you need to [set your inventory](http://docs.ansible.com/intro_inventory.html). \r\nThen, go inside the directory named **provisioning** and \r\n*let the hacking begin* with this command.\r\n\r\n```bash\r\n$ ansible-playbook -vvvv -u remote_user_name --sudo site.yml\r\n# Examples:\r\n$ ansible-playbook -vvvv -u root --sudo site.yml\r\n$ ansible-playbook -vvvv -u dgnest --sudo site.yml\r\n```\r\n\r\nRunning our Django Project\r\n=========================\r\n\r\nInside out guest machine (vagrant) run *su newuser* to login as our\r\ndeployment user (newuser). Finally enter to the virtualenv and run the basics.\r\n\r\n```bash\r\n$ cd ~ && source venv/bin/activate\r\n# Go inside your repo.\r\n$ python manage.py runserver localhost:9000\r\n```\r\n\r\nTo check in the browser's host machine:\r\n\r\n```bash\r\n192.168.33.10\r\n```\r\n---\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}